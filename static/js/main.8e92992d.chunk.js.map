{"version":3,"sources":["containers/Root.js","components/Root.jsx","actions/data.js","database/database.js","components/ThreadForm.jsx","components/ThreadCard.jsx","components/Home.jsx","containers/Home.js","containers/ThreadList.js","components/ThreadList.jsx","components/CommentCard.jsx","components/CommentForm.jsx","components/Thread.jsx","containers/Thread.js","components/Header.jsx","containers/Header.js","reducers/data.js","index.jsx","store/index.js"],"names":["connect","state","dispatch","goToHome","push","onClick","getThreads","type","payload","threads","require","getContents","id","contents","gC","useStyles","makeStyles","theme","button","marginTop","marginBottom","errorText","color","palette","error","main","ThreadForm","props","classes","React","useState","open","setOpen","title","creator","description","bodyData","setBodyData","valueError","setValueError","status","statusText","postError","setPostError","Button","variant","className","Dialog","onClose","fullWidth","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","required","margin","label","helperText","onChange","e","target","value","multiline","rows","DialogActions","axios","post","then","res","window","location","reload","catch","err","response","item","background","border","borderRadius","ThreadCard","ListItem","ListItemText","primary","Typography","secondary","align","date","root","data","getThreadsError","openThread","showThreadList","useEffect","Container","Box","pt","pb","List","slice","reverse","map","threadId","Snackbar","ContentProps","anchorOrigin","vertical","horizontal","SnackbarContent","snackbar","message","action","IconButton","style","borderTop","grid","CommentCard","Grid","container","justify","index","reply","text","CommentForm","disabled","setDisabled","Paper","p","endIcon","ownProps","match","params","getContentsError","thread","find","v","content","flexGrow","menuButton","marginRight","spacing","backToHome","AppBar","position","Toolbar","edge","aria-label","initialState","isFetching","loginReducer","Object","assign","history","createBrowserHistory","store","reduxCreateStore","combineReducers","persistReducer","key","storage","storageSession","whitelist","dataReducer","router","routerReducer","applyMiddleware","routerMiddleware","thunk","persistor","persistStore","render","loading","exact","path","component","Root","Header","Home","ThreadList","Thread","document","getElementById"],"mappings":"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","file":"static/js/main.8e92992d.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport Root from '../components/Root';\n\nconst mapStateToProps = (state) => {\n  return {\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    goToHome() {\n      dispatch(push('/home'));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Root);\n","import React from 'react';\n\nexport default function Root({ goToHome }) {\n  goToHome();\n  return (\n    <div>\n      <button onClick={() => goToHome()}>Home</button>\n    </div>\n  );\n}\n","import axios from \"axios\";\nimport { getThreads as gT, getContent as gC } from '../database/database';\n\n\nconst sendRequest = () => {\n  return {\n    type: \"SEND_REQUEST\"\n  };\n};\n\nconst getThreadsSuccess = (json) => {\n  return {\n    type: \"GET_THREADS_SUCCESS\",\n    payload: {\n      threads: json,\n    }\n  };\n};\n\nconst getThreadsFailure = (error) => {\n  return {\n    type: \"GET_THREADS_FAILURE\",\n    payload: {\n      error\n    }\n  };\n};\n\nconst getContentsSuccess = (json) => {\n  return {\n    type: \"GET_CONTENTS_SUCCESS\",\n    payload: {\n      contents: json,\n    }\n  };\n};\n\nconst getContentsFailure = (error) => {\n  return {\n    type: \"GET_CONTENTS_FAILURE\",\n    payload: {\n      error\n    }\n  };\n};\n\nconst postRequestSuccess = () => {\n  return {\n    type: \"POST_REQUEST_SUCCESS\"\n  };\n};\n\nconst postRequestFailure = (error) => {\n  return {\n    type: \"POST_REQUEST_FAILURE\",\n    payload: {\n      error\n    }\n  };\n};\n\n// dummy\nexport const getThreads = () => {\n  return (dispatch) => {\n    dispatch(sendRequest());\n    dispatch(getThreadsSuccess(gT()));\n  };\n};\nexport const getContents = (id) => {\n  return (dispatch) => {\n    dispatch(sendRequest());\n    dispatch(getContentsSuccess({[id]: gC(id)}));\n  };\n};\n// use API\n/*\nexport const getThreads = () => {\n  return (dispatch) => {\n    dispatch(sendRequest());\n    return axios.get(\"/keijiban/threads\", {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => dispatch(getThreadsSuccess(res.data)))\n      .catch(err => dispatch(getThreadsFailure(err.response)));\n  };\n}\n\nexport const getContents = (id) => {\n  return (dispatch) => {\n    dispatch(sendRequest());\n    return axios.get(\"http://540c5374.ngrok.io/keijiban/contents\", { threadId: id })\n      .then(res => dispatch(getContentsSuccess({[id]: res.data})))\n      .catch(err => dispatch(getContentsFailure(err.response)));\n  };\n}\n*/\n\nconst postRequest = (url, body) => {\n  return (dispatch) => {\n    dispatch(sendRequest());\n    return axios(url, body)\n      .then(res => dispatch(postRequestSuccess(res.data)))\n      .catch(err => dispatch(postRequestFailure(err)));\n  };\n}\n\n","export const getThreads = () => {\n  let data = require(\"./database.json\");\n  return data.threads;\n};\n\nexport const getContent = (id) => {\n  let data = require(\"./database.json\");\n  return data[\"contents\"][id];\n};\n\nexport const addThread = (title, text) => {\n  let data = require(\"./database.json\");\n  let fs = require(\"fs\");\n  let id = data[\"threads\"].length + 1;\n  data[\"threads\"].push({\"id\": id, \"title\": title});\n  data[\"contents\"][id] = {\"text\": text};\n  fs.writeFile(\"./database.json\", JSON.stringify(data, null, ' '));\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: 20,\n    marginBottom: 10\n  },\n  errorText: {\n    marginTop: 20,\n    color: theme.palette.error.main\n  }\n}));\n\nexport default function ThreadForm(props) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [bodyData, setBodyData] = React.useState({\n    title: '',\n    creator: '',\n    description: ''\n  });\n  const [valueError, setValueError] = React.useState({\n    title: false,\n    creator: false,\n  });\n  const [postError, setPostError] = React.useState({\n    error: false,\n    status: null,\n    statusText: ''\n  });\n\n  const postData = () => {\n    setValueError({title: !bodyData.title, creator: !bodyData.creator});\n    if (bodyData.title && bodyData.creator) {\n      axios.post(\"/keijiban/threads\", bodyData)\n        .then(res => (res.status == 201) && window.location.reload())\n        .catch(err => setPostError({error: true, status: err.response.status, statusText: err.response.statusText}));\n    } else {\n      setPostError({...postError, error: false});\n    }\n  };\n\n  return (\n    <div>\n      <Button variant='contained' color='primary' className={classes.button} onClick={() => setOpen(true)}>\n        新規\n      </Button>\n      <Dialog open={open} onClose={() => setOpen(false)} fullWidth  aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>スレッドの新規作成</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            新たに作成するスレッド名と簡単な説明を入力してください\n          </DialogContentText>\n          <TextField\n            autoFocus\n            required\n            margin='dense'\n            id='name'\n            label='お名前'\n            helperText={valueError.creator && '必ず入力してください'}\n            onChange={e => setBodyData({...bodyData, creator: e.target.value})}\n            error={valueError.creator}\n          />\n          <TextField\n            autoFocus\n            required\n            margin='dense'\n            id='title'\n            label='スレッド名'\n            helperText={valueError.title && '必ず入力してください'}\n            fullWidth\n            onChange={e => setBodyData({...bodyData, title: e.target.value})}\n            error={valueError.title}\n          />\n          <TextField\n            autoFocus\n            margin='dense'\n            id='description'\n            label='スレッドの説明'\n            multiline\n            rows={2}\n            fullWidth\n            onChange={e => setBodyData({...bodyData, description: e.target.value})}\n          />\n          <DialogContentText className={classes.errorText}>\n            {postError.error && `サーバーへの送信に失敗しました ${postError.status} (${postError.statusText})`}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => postData()} color='primary'>\n            作成\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst useStyles = makeStyles(theme => ({\n  item: {\n    background: \"#fafaff\",\n    border: 'solid 1px #e1e1ff',\n    borderRadius: 3,\n    margin: 3\n  }\n}));\n\nexport default function ThreadCard(props) {\n  const classes = useStyles();\n\n  return (\n    <ListItem button className={classes.item} onClick={props.onClick} >\n      <ListItemText\n        primary={\n          <Typography variant=\"h4\">{props.title}</Typography>\n        }\n        secondary={\n          <div>\n            <Typography variant=\"subtitle1\">{props.description}</Typography>\n            <br />\n            <Typography align=\"right\" variant=\"body2\">作成者: {props.creator}</Typography>\n            <Typography align=\"right\" variant=\"body2\">{props.date}</Typography>\n          </div>\n        }\n      />\n    </ListItem>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport Box from '@material-ui/core/Box';\nimport Refresh from '@material-ui/icons/Refresh';\nimport ThreadForm from './ThreadForm';\nimport ThreadCard from \"./ThreadCard\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: 'linear-gradient(45deg, #efefff 30%, #efffff 90%)',\n  },\n  item: {\n    background: \"#fafaff\",\n    border: 'solid 1px #e1e1ff',\n    borderRadius: 3,\n    margin: 3\n  },\n  error: {\n    background: 'linear-gradient(45deg, #f44336 30%, #d32f2f 90%)'\n  }\n}));\n\nexport default function UserPage({ threads, error, getThreads, openThread, showThreadList }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  React.useEffect(() => {\n    getThreads();\n  }, []);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Container>\n        <Box pt={3} pb={2}>\n          <Typography variant=\"h4\">My Board</Typography>\n          <ThreadForm />\n        </Box>\n        <Box pt={2}>\n        <Typography variant=\"h4\">最新スレッド</Typography>\n        <List>\n        {\n          threads.slice(-5).reverse().map((item) => {\n            return (\n              <ThreadCard\n                {...item}\n                onClick={() => openThread(item.threadId)}\n              />\n            );\n          })\n        }\n        </List>\n        <Button variant='contained' color='primary' onClick={() => showThreadList()}>スレッド一覧</Button>\n      </Box>\n      </Container>\n\n      <Snackbar\n        ContentProps={classes.error}\n        anchorOrigin={{vertical: \"top\", horizontal:\"center\"}}\n        open={open && error}\n        onClose={handleClose}\n      >\n        <SnackbarContent\n          className={classes.snackbar}\n          message={\n            <div>\n              <Typography variant=\"h6\">threads</Typography>\n              <Typography variant=\"body1\">{error.status} ({error.statusText})</Typography>\n            </div>\n          }\n          action={\n            <IconButton onClick={() => window.location.reload(true)}>\n              <Refresh />\n            </IconButton>\n          }\n        />\n      </Snackbar>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport { getThreads } from '../actions/data';\nimport Home from '../components/Home';\n\nconst mapStateToProps = ({ data }) => {\n  return {\n    threads: data.threads,\n    error: data.getThreadsError\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getThreads() {\n      dispatch(getThreads());\n    },\n    openThread(id) {\n      dispatch(push('/home/threads/' + id));\n    },\n    showThreadList() {\n      dispatch(push('/home/threads'));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport ThreadList from '../components/ThreadList';\n\nconst mapStateToProps = ({ data }) => {\n  return {\n    threads: data.threads,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    openThread(id) {\n      dispatch(push('/home/threads/' + id));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreadList);\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ThreadCard from \"./ThreadCard\";\n\nexport default function ThreadList({threads, openThread}) {\n  return (\n    <Container style={{background: '#efefff'}}>\n      <Box pt={3} pb={2}>\n        <Typography variant='h4'>スレッド一覧</Typography>\n      </Box>\n      <List>\n      {\n        threads.slice().reverse().map((item) => {\n          return (\n            <ThreadCard\n              title={item.title}\n              description={item.description}\n              creator={item.creator}\n              date={item.date}\n              onClick={() => openThread(item.threadId)}\n            />\n          );\n        })\n      }\n      </List>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst useStyles = makeStyles(theme => ({\n  item: {\n    borderTop: 'solid 1px #e1e1ff',\n  },\n  grid: {\n    color: \"#777766\"\n  }\n}));\n\nexport default function CommentCard(props) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.item}>\n      <ListItemText\n        primary={\n          <div>\n            <Grid container justify=\"space-between\">\n              <Typography align='left' variant='body2' color=\"textSecondary\">\n                {props.index}. {(props.reply != 0) && `>> ${props.reply}.`}\n              </Typography>\n              <Typography align='right' variant='body2' color=\"textSecondary\">\n                {props.creator} : {props.date}\n              </Typography>\n            </Grid>\n            <Typography variant='body1'>\n              {props.text}\n            </Typography>\n          </div>\n        }\n      />\n    </ListItem>\n  );\n}\n","import React from 'react';\nimport axios from 'axios';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Send from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function CommentForm(props) {\n  const [disabled, setDisabled] = React.useState(true);\n  const [bodyData, setBodyData] = React.useState({\n    creator: '',\n    text: '',\n    threadId: props.threadId,\n    reply: 0,\n  });\n  const [postError, setPostError] = React.useState({\n    error: false,\n    status: null,\n    statusText: ''\n  });\n\n  React.useEffect(() => {\n    if (bodyData.creator && bodyData.text) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [bodyData]);\n\n  const postData = () => {\n    if (bodyData.text && bodyData.creator) {\n      axios.post(\"/keijiban/contents\", bodyData)\n        .then(res => (res.status == 201) && window.location.reload())\n        .catch(err => setPostError({error: true, status: err.response.status, statusText: err.response.statusText}));\n    }\n  };\n\n  return (\n    <Paper>\n      <Box p={1}>\n      <TextField\n        required\n        margin='dense'\n        id='name'\n        label='お名前'\n        variant='outlined'\n        onChange={e => setBodyData({...bodyData, creator: e.target.value})}\n      />\n      <TextField\n        required\n        margin='dense'\n        id='comment'\n        label='コメント'\n        multiline\n        rows={3}\n        fullWidth\n        variant='outlined'\n        onChange={e => setBodyData({...bodyData, text: e.target.value})}\n      />\n      <Typography variant='body1' color='error'>\n        {postError.error && `サーバーへの送信に失敗しました ${postError.status} (${postError.statusText})`}\n      </Typography>\n      <Button\n        variant='contained'\n        color='primary'\n        endIcon={<Send />}\n        fullWidth\n        disabled={disabled}\n        onClick={() => postData()}\n      >\n        送信\n      </Button>\n      </Box>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Refresh from '@material-ui/icons/Refresh';\nimport CommentCard from './CommentCard';\nimport CommentForm from './CommentForm';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: 'linear-gradient(45deg, #efefff 30%, #efffff 90%)',\n  },\n  snackbar: {\n    background: 'linear-gradient(45deg, #f44336 30%, #d32f2f 90%)'\n  },\n  item: {\n    borderTop: 'solid 1px #e1e1ff',\n  },\n  grid: {\n    color: \"#777766\"\n  }\n}));\n\nexport default function Thread({threads, contents, error, threadId, getContents}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  getContents(threadId);\n\n  React.useEffect(() => {\n    getContents(threadId);\n  });\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const thread = threads.find(v => v.threadId == threadId);\n  const content = contents[threadId];\n\n  return (\n    <div className={classes.root}>\n      <Container className={classes.root}>\n        <Paper>\n          <Box p={1}>\n            <Typography variant=\"h4\">{thread.title}</Typography>\n            <Typography variant=\"subtitle1\">{thread.description}</Typography>\n            <Typography variant=\"body1\">作成者:{thread.creator}  作成日:{thread.date}</Typography>\n          </Box>\n          <List>\n          {\n            content.map(v => {\n              return (\n                <CommentCard {...v} />\n              );\n            })\n          }\n          </List>\n        </Paper>\n        <Box pt={.5}>\n          <CommentForm threadId={threadId} />\n        </Box>\n      </Container>\n      <Snackbar\n        ContentProps={classes.error}\n        anchorOrigin={{vertical: \"top\", horizontal:\"center\"}}\n        open={open && error}\n        onClose={handleClose}\n      >\n        <SnackbarContent\n          className={classes.snackbar}\n          message={\n            <Typography variant=\"body1\">{error.status} ({error.statusText})</Typography>\n          }\n          action={\n            <IconButton onClick={() => window.location.reload(true)}>\n              <Refresh />\n            </IconButton>\n          }\n        />\n      </Snackbar>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\nimport Thread from '../components/Thread';\nimport { getContents } from '../actions/data';\n\nconst mapStateToProps = ({data}, ownProps) => {\n  return {\n    threadId: ownProps.match.params.id,\n    threads: data.threads,\n    contents: data.contents,\n    error: data.getContentsError\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getContents(id) {\n      dispatch(getContents(id));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Thread);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header({backToHome}) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar color='primary' position='static'>\n        <Toolbar>\n          <IconButton className={classes.menuButton} edge='start' color='inherit' aria-label='menu'>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' color='inherit' className={classes.title} onClick={backToHome}>\n              掲示板\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport Header from '../components/Header';\n\nconst mapStateToProps = ({}) => {\n  return {\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    backToHome() {\n      dispatch(push('/home'));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","const initialState = {\n  threads: [],\n  contents: {},\n  isFetching: false,\n  getThreadsError: \"\",\n  getContentsError: \"\"\n};\n\nexport default function loginReducer(state=initialState, action) {\n  switch (action.type) {\n    case 'SEND_REQUEST':\n      return {\n        ...state,\n        isFetching: true,\n        getThreadsError: \"\",\n        getContentsError: \"\"\n      };\n    case 'GET_THREADS_SUCCESS':\n      return {\n        ...state,\n        threads: action.payload.threads,\n        isFetching: false\n      };\n    case 'GET_THREADS_FAILURE':\n      return {\n        ...state, isFetching: false,\n        getThreadsError: action.payload.error,\n      };\n    case 'GET_CONTENTS_SUCCESS':\n      return {\n        ...state,\n        isFetching: false,\n        contents: Object.assign(state.contents, action.payload.contents)\n      };\n    case 'GET_CONTENTS_FAILURE':\n      return {\n        ...state,\n        isFetching: false,\n        getContentsError: action.payload.error\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\nimport { Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport Root from './containers/Root';\nimport Home from './containers/Home';\nimport ThreadList from './containers/ThreadList';\nimport Thread from './containers/Thread';\nimport Header from './containers/Header';\nimport createStore from './store';\n\n// History\nconst history = createBrowserHistory();\n\n// Store\nconst store = createStore(history);\nconst persistor = persistStore(store);\n\n// React\nrender(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ConnectedRouter history={history}>\n        <div>\n          <Route exact path='/' component={Root} />\n          <Route path='/home' component={Header} />\n          <Route exact path='/home' component={Home} />\n          <Route exact path='/home/threads' component={ThreadList} />\n          <Route path='/home/threads/:id' component={Thread} />\n        </div>\n      </ConnectedRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n","import {\n  createStore as reduxCreateStore,\n  combineReducers,\n  applyMiddleware\n} from 'redux';\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\nimport { persistReducer } from 'redux-persist';\nimport storageSession from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport dataReducer from '../reducers/data';\n\nexport default function createStore(history) {\n  return reduxCreateStore(\n    combineReducers({\n      data: persistReducer({key: 'data', storage: storageSession, whitelist: ['threads']}, dataReducer),\n      router: routerReducer\n    }),\n    applyMiddleware(\n      routerMiddleware(history),\n      thunk\n    )\n  );\n}\n"],"sourceRoot":""}